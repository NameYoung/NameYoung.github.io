<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot DBUnit</title>
    <link href="/2021/03/07/spring-db-unit/"/>
    <url>/2021/03/07/spring-db-unit/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>如何在Spring项目中使用DBUnit?</p>          </div><a id="more"></a><blockquote><p>项目中一直打算引入数据库单测，抽空研究了一下DBUnit. 并根据项目做了些简单修改，本文将以 <strong>MyBatis+MySQL</strong> 为例创建 DBunit Test</p></blockquote><h1 id="DBUnit-简述"><a href="#DBUnit-简述" class="headerlink" title="DBUnit 简述"></a>DBUnit 简述</h1><blockquote><p><a href="http://dbunit.sourceforge.net/">DBUnit项目地址</a></p></blockquote><div class="note note-primary">            <p>DBUnit 是一个数据库单测工具，基于JUnit.<br>目的是执行单测试时保证数据库数据已知以及数据可重复利用</p>          </div><h1 id="Spring-DBunit"><a href="#Spring-DBunit" class="headerlink" title="Spring DBunit"></a>Spring DBunit</h1><blockquote><p><a href="https://springtestdbunit.github.io/spring-test-dbunit/sample.html">项目地址</a></p></blockquote><div class="note note-primary">            <p>Spring 项目的维护者 @philwebb 创建了一个开源项目spring-test-dbunit 方便DBUnit 在Spring‘套餐’中使用。PS: 由于他本人很忙，此项目已经废弃。</p>          </div><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><h2 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h2><blockquote><p>以gradle为例</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>implementation <span class="hljs-string">&#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4&#x27;</span><br><span class="hljs-comment">// 用flyway来管理数据库脚本</span><br>implementation <span class="hljs-string">&#x27;org.flywaydb:flyway-core&#x27;</span><br><br>runtimeOnly <span class="hljs-string">&#x27;mysql:mysql-connector-java&#x27;</span><br><br>    <span class="hljs-comment">// 核心包</span><br>testImplementation <span class="hljs-string">&#x27;com.github.springtestdbunit:spring-test-dbunit:1.2.0&#x27;</span><br>testImplementation <span class="hljs-string">&#x27;org.dbunit:dbunit:2.7.0&#x27;</span><br>testImplementation <span class="hljs-string">&#x27;com.h2database:h2&#x27;</span><br><span class="hljs-comment">// 常规包</span><br>testImplementation <span class="hljs-string">&#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.4&#x27;</span><br>testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>testImplementation <span class="hljs-string">&#x27;junit:junit&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h2><p><strong>src/main/resources/db/migration/V1__init_user.sql</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 若类路径有flyway包，则spring boot会自动加载<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span><br>(<br>    id         <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>    last_name  <span class="hljs-type">char</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    first_name <span class="hljs-type">char</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><h2 id="创建基本类"><a href="#创建基本类" class="headerlink" title="创建基本类"></a>创建基本类</h2><p><strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function">User <span class="hljs-title">selectById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>User.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> String firstName;<br><br>    <span class="hljs-comment">// setter &amp;&amp; getter</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.spring.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.spring.model.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;first_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;firstName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span>&gt;</span><br>        select *<br>        from<br>            `user`<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><h3 id="测试配置文件"><a href="#测试配置文件" class="headerlink" title="测试配置文件"></a>测试配置文件</h3><blockquote><p>覆盖默认配置，本例使用h2内存数据库，所以达到每次执行测试都有一个新库的效果，不会影响真实数据库环境</p></blockquote><p><strong>test/java/resourcesapplication.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:h2:mem:test</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">org.h2.Driver</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><br><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mybatis/*.xml</span><br></code></pre></td></tr></table></figure><h3 id="DBUnit-dataset文件"><a href="#DBUnit-dataset文件" class="headerlink" title="DBUnit dataset文件"></a>DBUnit dataset文件</h3><blockquote><p>使用DBUnit自身的CSV DataSet, 也可使用xml等文件配置数据集</p></blockquote><p><strong>test/java/resources/csv/table-ordering.txt</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">user<br></code></pre></td></tr></table></figure><p><strong>test/java/resources/csv/user.csv</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">id,first_name,last_name<br>3,wukong,sun<br>4,seng,tang<br></code></pre></td></tr></table></figure><h3 id="DBUnit-配置"><a href="#DBUnit-配置" class="headerlink" title="DBUnit 配置"></a>DBUnit 配置</h3><blockquote><p>使用CSV文件时，需要做一些自定义配置。使用XML可以参考spring-test-dbunit的DEMO</p></blockquote><p><strong>CsvLoader.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CsvLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractDataSetLoader</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> IDataSet <span class="hljs-title">createDataSet</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CsvURLDataSet(resource.getURL());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CustomTestConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TestConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomTestConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSetLoader <span class="hljs-title">dataSetLoader</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CsvLoader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><p><strong>DbunitTest.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = CustomTestConfiguration.class)</span><br><span class="hljs-meta">@MybatisTest</span><br><span class="hljs-meta">@DbUnitConfiguration(databaseConnection = &quot;dataSource&quot;, dataSetLoader = CsvLoader.class)</span><br><span class="hljs-meta">@TestExecutionListeners(&#123;DependencyInjectionTestExecutionListener.class,</span><br><span class="hljs-meta">                         DbUnitTestExecutionListener.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbunitTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DatabaseSetup(&quot;classpath:csv/user.csv&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectOne</span><span class="hljs-params">()</span> </span>&#123;<br>        User userA = userMapper.selectById(<span class="hljs-number">3L</span>);<br>        assertEquals(<span class="hljs-string">&quot;wukong&quot;</span>, userA.getFirstName());<br><br>        User userB = userMapper.selectById(<span class="hljs-number">4L</span>);<br>        assertEquals(<span class="hljs-string">&quot;tang&quot;</span>, userB.getLastName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="其他组件集成"><a href="#其他组件集成" class="headerlink" title="其他组件集成"></a>其他组件集成</h1><h2 id="Spring-JPA"><a href="#Spring-JPA" class="headerlink" title="Spring JPA"></a>Spring JPA</h2><p>Spring JPA 配置思路基本一致</p><h2 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h2><blockquote><p>与MyBatis一致</p></blockquote><div class="note note-success">            <p>引入 com.baomidou:mybatis-plus-boot-starter:{version}<br>使用 <strong>@MybatisPlusTest</strong> 替换 <strong>@MybatisTest</strong></p>          </div><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>终于可以免于手动测试了…… 后续抽时间讲一下原理</p>]]></content>
    
    
    <categories>
      
      <category>UnitTest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBUnit</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>UnitTest</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Get Key</title>
    <link href="/2021/01/24/redis-str-get/"/>
    <url>/2021/01/24/redis-str-get/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>为什么 GET [key] 复杂度为 O(1) ?</p>          </div><a id="more"></a><h1 id="键值对存储结构"><a href="#键值对存储结构" class="headerlink" title="键值对存储结构"></a>键值对存储结构</h1><blockquote><p>Redis 所有键值对存储在一个全局字典表中，利用key来快速查找匹配到对应的键值对，时间复杂度O(1)<br>可以类比 <strong>Java HashMap</strong> </p></blockquote><p><img src="/images/redis-dic.png" alt="pic 1: redis 字典结构"></p><div class="note note-success">            <p>补充：</p><ul><li>ht[0]、ht[1] 是为rehash准备的</li><li>字段具体结构会在后续文章展开</li></ul>          </div><h1 id="Key查找方法"><a href="#Key查找方法" class="headerlink" title="Key查找方法"></a>Key查找方法</h1><blockquote><p>源文件 src/dict.c#dicFind</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">dictEntry *<span class="hljs-title">dictFind</span><span class="hljs-params">(dict *d, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *key)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// *d 即为键值对字典对象指针</span><br>    dictEntry *he;<br>    <span class="hljs-keyword">uint64_t</span> h, idx, table;<br><br>    <span class="hljs-keyword">if</span> (dictSize(d) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <br>    <span class="hljs-keyword">if</span> (dictIsRehashing(d)) _dictRehashStep(d);<br><br>    <span class="hljs-comment">// 获得key的hash值</span><br>    h = dictHashKey(d, key);<br>    <span class="hljs-comment">// table即为上图中的 ht数组（共有两个元素）</span><br>    <span class="hljs-keyword">for</span> (table = <span class="hljs-number">0</span>; table &lt;= <span class="hljs-number">1</span>; table++) &#123;<br>    <span class="hljs-comment">// 计算key的index</span><br>        idx = h &amp; d-&gt;ht[table].sizemask;<br>        <span class="hljs-comment">// 获取到index对应链表的头指针</span><br>        he = d-&gt;ht[table].table[idx];<br>        <span class="hljs-keyword">while</span>(he) &#123;<br>        <span class="hljs-comment">// 逐个判断是否相等</span><br>            <span class="hljs-keyword">if</span> (key==he-&gt;key || dictCompareKeys(d, key, he-&gt;key))<br>                <span class="hljs-keyword">return</span> he;<br>            he = he-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 若没有正在镜像 rehash, 则直接结束 即rehash时两个table都要进行扫描</span><br>        <span class="hljs-keyword">if</span> (!dictIsRehashing(d)) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由源代码可知, 查找key（dictEntry）只需两步</p><ol><li>计算hash值并计算索引</li><li>链表上逐个匹配</li></ol><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><pre><code class="mermaid" >flowchart TB    getGenericCommand-->lookupKeyReadOrReplysubgraph t_string.c    getCommand-->getGenericCommand    end    subgraph db.c    lookupKeyReadOrReply-->lookupKeyReadWithFlags    lookupKeyReadWithFlags-->lookupKey    lookupKey-->dictFind    end</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><div class="note note-info">            <p>由以上可知，Redis GET Key 并不是严格意义上的 O(1), 实际上是O(1+M) M即链表上查找所经过的长度。但是为什么文档上写O(1)呢？这是因为Redis rehash保证了每个桶（dictEntry 链表）持有尽可能少的元素，所以时间复杂度近似O(1)。</p>          </div><p>下一篇，继续从源码入手研究rehash策略。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021 开篇大吉</title>
    <link href="/2021/01/09/first-blog/"/>
    <url>/2021/01/09/first-blog/</url>
    
    <content type="html"><![CDATA[<blockquote><p>吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？</p><footer><strong>孟子 《论语》</strong></footer></blockquote><a id="more"></a><p>花了半天时间，建了下博客。一直期望找个清净之地，记录一下所思所想，挑来挑去，还是借GitHub宝地一用吧。</p><p>写代码的时候，发现了GitHub已将master更改为main，结合地球另一边的“大闹天宫”，再看看当下疫情，过去的2020真是风云变幻、大开眼界之年。经济全球化的大趋势难以逆转，类似川普等保守势力的上台只能说是回光返照、“短期反弹”，任何国家，甚至是任何个人也难以独善其身，合作才能共赢啊。虽说我们抗疫取得阶段胜利，但是防控、发展等各方面的压力都非常大，原来这就是“百年未有之大变局”。新的一年，期望疫情早早结束，打工人能<strong>少加班、多挣钱</strong>。</p><p>2021年，也给自己做一些新的要求，期望以此为始，<strong>持续学习</strong>，定期输出：</p><ul><li>多读书多看报</li><li>技术类文章 1 篇/月</li><li>其他类文章 随缘更新</li></ul><p>对于技术而言，还是要戒骄戒躁，一步步啃难点。对于常用的中间件，有机会还是要多读读源码，既要懂得原理，也要学会拿来即用。急于求成是不可取的，要以实战项目为中心，<strong>“点-线-面”</strong>的搭建自己的知识体系，定期的总结归纳是必须的。<br>每日三省做不到没关系，每周一省就可以了：</p><ul><li>每周少摸了几天鱼</li><li>每周少加了几天班</li><li>每周遇到了哪些坑</li><li>每周多学了几个知识</li><li>每周写了多少有效代码</li></ul><blockquote><p>2021，冲冲冲！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
